<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Transactions.IO</name>
    </assembly>
    <members>
        <member name="T:Castle.Transactions.IO.DirectoryAdapter">
            <summary>
            	Adapter which wraps the functionality in <see cref="T:Castle.IO.IFile"/>
            	together with native kernel transactions.
            </summary>
        </member>
        <member name="T:Castle.Transactions.IO.TransactionAdapterBase">
            <summary>
            	Adapter base class for the file and directory adapters.
            </summary>
        </member>
        <member name="P:Castle.Transactions.IO.TransactionAdapterBase.TransactionManager">
            <summary>
            	Gets the transaction manager, if there is one, or sets it.
            </summary>
        </member>
        <member name="P:Castle.Transactions.IO.TransactionAdapterBase.UseTransactions">
            <summary>
            	Gets/sets whether to use transactions.
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.DirectoryAdapter.#ctor(Castle.IO.IMapPath,System.Boolean,System.String)">
            <summary>
            	Create a new DirectoryAdapter instance. C'tor.
            </summary>
            <param name = "pathFinder">The MapPath implementation.</param>
            <param name = "constrainToSpecifiedDir">Whether to ChJail the DirectoryAdapter.</param>
            <param name = "specifiedDir">The directory to constrain the adapter to.</param>
        </member>
        <member name="T:Castle.Transactions.IO.FileAdapter">
            <summary>
            	Adapter class for the file transactions
            	which implement the same interface.
            
            	This adapter chooses intelligently whether there's an ambient
            	transaction, and if there is, joins it.
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapter.#ctor">
            <summary>
            	c'tor
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapter.#ctor(System.Boolean,System.String)">
            <summary>
            	c'tor
            </summary>
            <param name = "constrainToSpecifiedDir"></param>
            <param name = "specifiedDir"></param>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapter.Create(System.String)">
            <summary>
            	Creates a new file from the given path for ReadWrite,
            	different depending on whether we're in a transaction or not.
            </summary>
            <param name = "path">Path to create file at.</param>
            <returns>A filestream for the path.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapter.Exists(System.String)">
            <summary>
            	Returns whether the specified file exists or not.
            </summary>
            <param name = "filePath">The file path.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapterExtensions.WriteStream(Castle.IO.IFileAdapter,System.String,System.IO.Stream)">
            <summary>
            Writes an input stream to the file path.
            </summary>
            <param name="adapter"></param>
            <param name="targetPath">The path to write to.</param>
            <param name="sourceStream">The stream to read from.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapterExtensions.WriteAllText(Castle.IO.IFileAdapter,System.String,System.String)">
            <summary>
            Writes text to a file as part of a transaction.
            If the file already contains data, first truncates the file
            and then writes all contents in the string to the file.
            </summary>
            <param name="adapter"></param>
            <param name="targetPath">Path to write to</param>
            <param name="contents">Contents of the file after writing to it.</param>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapterExtensions.ReadAllText(Castle.IO.IFileAdapter,System.String)">
            <summary>
            Reads all text from a file as part of a transaction
            </summary>
            <param name="adapter"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapterExtensions.ReadAllText(Castle.IO.IFileAdapter,System.String,System.Text.Encoding)">
            <summary>
             Reads all text in a file and returns the string of it.
            </summary>
            <param name="adapter"></param>
            <param name="path"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileAdapterExtensions.ReadAllLines(Castle.IO.IFileAdapter,System.String)">
            <summary>
            Read all lines in the given path.
            </summary>
            <param name="adapter"></param>
            <param name="filePath"></param>
        </member>
        <member name="T:Castle.Transactions.IO.FileTransaction">
            <summary>
            	Represents a transaction on transactional kernels
            	like the Vista kernel or Server 2008 kernel and newer.
            </summary>
            <remarks>
            	Good information for dealing with the peculiarities of the runtime:
            	http://msdn.microsoft.com/en-us/library/system.runtime.interopservices.safehandle.aspx
            </remarks>
        </member>
        <member name="T:Castle.Transactions.IO.IFileTransaction">
            <summary>
            Interface for file transactions.
            </summary>
        </member>
        <member name="P:Castle.Transactions.IO.IFileTransaction.Handle">
            <summary>
            Gets the safe file transaction handle.
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Castle#IO#IDirectoryAdapter#Create(System.String)">
            <summary>
            	Creates a directory at the path given.
            </summary>
            <param name = "path">The path to create the directory at.</param>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Castle#IO#IDirectoryAdapter#Delete(System.String)">
            <summary>
            	Deletes a folder recursively.
            </summary>
            <param name = "path">The directory path to start deleting at!</param>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Castle#IO#IDirectoryAdapter#Exists(System.String)">
            <summary>
            	Checks whether the path exists.
            </summary>
            <param name = "path">Path to check.</param>
            <returns>True if it exists, false otherwise.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Castle#IO#IDirectoryAdapter#Delete(System.String,System.Boolean)">
            <summary>
            	Deletes an empty directory
            </summary>
            <param name = "path">The path to the folder to delete.</param>
            <param name = "recursively">
            	Whether to delete recursively or not.
            	When recursive, we delete all subfolders and files in the given
            	directory as well.
            </param>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Dispose">
            <summary>
            	Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Castle.Transactions.IO.FileTransaction.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            	Creates a file handle with the current ongoing transaction.
            </summary>
            <param name = "path">The path of the file.</param>
            <param name = "mode">The file mode, i.e. what is going to be done if it exists etc.</param>
            <param name = "access">The access rights this handle has.</param>
            <param name = "share">What other handles may be opened; sharing settings.</param>
            <returns>A safe file handle. Not null, but may be invalid.</returns>
        </member>
        <member name="P:Castle.Transactions.IO.FileTransaction.Name">
            <summary>
            	Gets the name of the transaction.
            </summary>
        </member>
        <member name="T:Castle.Transactions.IO.FileTransactionAttribute">
            <summary>
            Attribute denoting a file transaction should be started at the entry
            of this method.
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.IKernelTransaction.GetHandle(Castle.Transactions.IO.SafeKernelTransactionHandle@)">
            <summary>
            	Gets a safe transaction handle. If we instead use IntPtr we 
            	might not release the transaction handle properly.
            </summary>
            <param name = "handle"></param>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.GetFullPathNameTransactedW(System.String,System.Int32,System.Text.StringBuilder,System.IntPtr@,Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	http://msdn.microsoft.com/en-us/library/aa364966(VS.85).aspx
            	Retrieves the full path and file name of the specified file as a transacted operation.
            </summary>
            <remarks>
            	GetFullPathNameTransacted merges the name of the current drive and directory 
            	with a specified file name to determine the full path and file name of a 
            	specified file. It also calculates the address of the file name portion of
            	the full path and file name. This function does not verify that the 
            	resulting path and file name are valid, or that they see an existing file 
            	on the associated volume.
            </remarks>
            <param name = "lpFileName">The name of the file. The file must reside on the local computer; 
            	otherwise, the function fails and the last error code is set to 
            	ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE.</param>
            <param name = "nBufferLength">The size of the buffer to receive the null-terminated string for the drive and path, in TCHARs. </param>
            <param name = "lpBuffer">A pointer to a buffer that receives the null-terminated string for the drive and path.</param>
            <param name = "lpFilePart">A pointer to a buffer that receives the address (in lpBuffer) of the final file name component in the path. 
            	Specify NULL if you do not need to receive this information.
            	If lpBuffer points to a directory and not a file, lpFilePart receives 0 (zero).</param>
            <param name = "hTransaction"></param>
            <returns>If the function succeeds, the return value is the length, in TCHARs, of the string copied to lpBuffer, not including the terminating null character.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.CreateTransaction(System.IntPtr,System.IntPtr,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            	Creates a new transaction object. Passing too long a description will cause problems. This behaviour is indeterminate right now.
            </summary>
            <remarks>
            	Don't pass unicode to the description (there's no Wide-version of this function
            	in the kernel).
            	http://msdn.microsoft.com/en-us/library/aa366011%28VS.85%29.aspx
            </remarks>
            <param name = "lpTransactionAttributes">    
            	A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle 
            	can be inherited by child processes. If this parameter is NULL, the handle cannot be inherited.
            	The lpSecurityDescriptor member of the structure specifies a security descriptor for 
            	the new event. If lpTransactionAttributes is NULL, the object gets a default 
            	security descriptor. The access control lists (ACL) in the default security 
            	descriptor for a transaction come from the primary or impersonation token of the creator.
            </param>
            <param name = "uow">Reserved. Must be zero (0).</param>
            <param name = "createOptions">
            	Any optional transaction instructions. 
            	Value:		TRANSACTION_DO_NOT_PROMOTE
            	Meaning:	The transaction cannot be distributed.
            </param>
            <param name = "isolationLevel">Reserved; specify zero (0).</param>
            <param name = "isolationFlags">Reserved; specify zero (0).</param>
            <param name = "timeout">    
            	The time, in milliseconds, when the transaction will be aborted if it has not already 
            	reached the prepared state.
            	Specify NULL to provide an infinite timeout.
            </param>
            <param name = "description">A user-readable description of the transaction.</param>
            <returns>
            	If the function succeeds, the return value is a handle to the transaction.
            	If the function fails, the return value is INVALID_HANDLE_VALUE.
            </returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.CommitTransaction(Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	Requests that the specified transaction be committed.
            </summary>
            <remarks>
            	You can commit any transaction handle that has been opened 
            	or created using the TRANSACTION_COMMIT permission; any application can 
            	commit a transaction, not just the creator.
            	This function can only be called if the transaction is still active, 
            	not prepared, pre-prepared, or rolled back.
            </remarks>
            <param name = "transaction">
            	This handle must have been opened with the TRANSACTION_COMMIT access right. 
            	For more information, see KTM Security and Access Rights.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.RollbackTransaction(Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	Requests that the specified transaction be rolled back. This function is synchronous.
            </summary>
            <param name = "transaction">A handle to the transaction.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.FindFirstFileTransactedW(System.String,Castle.IO.FileSystems.Local.Win32.Interop.FINDEX_INFO_LEVELS,Castle.IO.FileSystems.Local.Win32.Interop.WIN32_FIND_DATA@,Castle.IO.FileSystems.Local.Win32.Interop.FINDEX_SEARCH_OPS,System.IntPtr,System.UInt32,Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <param name = "lpFileName"></param>
            <param name = "fInfoLevelId"></param>
            <param name = "lpFindFileData"></param>
            <param name = "fSearchOp">The type of filtering to perform that is different from wildcard matching.</param>
            <param name = "lpSearchFilter">
            	A pointer to the search criteria if the specified fSearchOp needs structured search information.
            	At this time, none of the supported fSearchOp values require extended search information. Therefore, this pointer must be NULL.
            </param>
            <param name = "dwAdditionalFlags">
            	Specifies additional flags that control the search.
            	FIND_FIRST_EX_CASE_SENSITIVE = 0x1
            	Means: Searches are case-sensitive.
            </param>
            <param name = "hTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.FindFirstFileTransacted(System.String,System.Boolean,Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	Not extern
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.FindFirstFileTransactedW(System.String,Castle.Transactions.IO.SafeKernelTransactionHandle,Castle.IO.FileSystems.Local.Win32.Interop.WIN32_FIND_DATA@)">
            <summary>
            	Not extern
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.CreateDirectoryTransactedW(System.String,System.String,System.IntPtr,Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	http://msdn.microsoft.com/en-us/library/aa363857(VS.85).aspx
            	Creates a new directory as a transacted operation, with the attributes of a specified 
            	template directory. If the underlying file system supports security on files and 
            	directories, the function applies a specified security descriptor to the new directory. 
            	The new directory retains the other attributes of the specified template directory.
            </summary>
            <param name = "lpTemplateDirectory">
            	The path of the directory to use as a template 
            	when creating the new directory. This parameter can be NULL.
            </param>
            <param name = "lpNewDirectory">The path of the directory to be created. </param>
            <param name = "lpSecurityAttributes">A pointer to a SECURITY_ATTRIBUTES structure. The lpSecurityDescriptor member of the structure specifies a security descriptor for the new directory.</param>
            <param name = "hTransaction">A handle to the transaction. This handle is returned by the CreateTransaction function.</param>
            <returns>True if the call succeeds, otherwise do a GetLastError.</returns>
        </member>
        <member name="M:Castle.Transactions.IO.Interop.NativeMethods.RemoveDirectoryTransactedW(System.String,Castle.Transactions.IO.SafeKernelTransactionHandle)">
            <summary>
            	http://msdn.microsoft.com/en-us/library/aa365490(VS.85).aspx
            	Deletes an existing empty directory as a transacted operation.
            </summary>
            <param name = "lpPathName">
            	The path of the directory to be removed. 
            	The path must specify an empty directory, 
            	and the calling process must have delete access to the directory.
            </param>
            <param name = "hTransaction">A handle to the transaction. This handle is returned by the CreateTransaction function.</param>
            <returns>True if the call succeeds, otherwise do a GetLastError.</returns>
        </member>
        <member name="T:Castle.Transactions.IO.SafeKernelTransactionHandle">
            <summary>
            	A safe file handle on the transaction resource.
            </summary>
        </member>
        <member name="M:Castle.Transactions.IO.SafeKernelTransactionHandle.#ctor(System.IntPtr)">
            <summary>
            	c'tor taking a pointer to a transaction.
            </summary>
            <param name = "handle">The transactional handle.</param>
        </member>
    </members>
</doc>
