<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.Facilities.AutoTx</name>
    </assembly>
    <members>
        <member name="T:Castle.Facilities.AutoTx.AutoTxFacility">
            <summary>
              <para>A facility for automatically handling transactions using the lightweight
                transaction manager. This facility does not depend on
                any other facilities.</para> <para>Install the facility in your container with
                                               <code>c.AddFacility&lt;AutoTxFacility&gt;</code>
                                             </para>
            </summary>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Lifestyles.WrapperResolveLifestyleManager`1">
            <summary>
            	Abstract hybrid lifestyle manager, with two underlying lifestyles
            </summary>
            <typeparam name = "T">Primary lifestyle manager which has its constructor resolved through
            	the main kernel.</typeparam>
        </member>
        <member name="T:Castle.Facilities.AutoTx.MissingTransactionException">
            <summary>
            	Exception thrown when there's no transaction available when the component is resolved and the component
            	requires a per-transaction lifestyle.
            </summary>
            <remarks>
            	Contains a custom property, thus it Implements ISerializable 
            	and the special serialization constructor.
            </remarks>
        </member>
        <member name="M:Castle.Facilities.AutoTx.MissingTransactionException.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:Castle.Facilities.AutoTx.MissingTransactionException"/> class.
            </summary>
        </member>
        <member name="M:Castle.Facilities.AutoTx.MissingTransactionException.#ctor(System.String)">
            <summary>
            	Initializes a new instance of the <see cref="T:Castle.Facilities.AutoTx.MissingTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.Facilities.AutoTx.MissingTransactionException.#ctor(System.String,System.Exception)">
            <summary>
            	Initializes a new instance of the <see cref="T:Castle.Facilities.AutoTx.MissingTransactionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Lifestyles.PerTopTransactionLifestyleManager">
            <summary>
            	A lifestyle manager for every top transaction in the current call context. This lifestyle is great
            	for components that are thread-safe and need to monitor/handle items in both the current thread
            	and any forked method invocations. It's also favoring memory if your application is single threaded,
            	as there's no need to create a new component every sub-transaction. (this refers to the Fork=true option
            	on the TransactionAttribute).
            </summary>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Lifestyles.PerTransactionLifestyleManagerBase">
            <summary>
            	This lifestyle manager is responsible for disposing components
            	at the same time as the transaction is completed, i.e. the transction
            	either Aborts, becomes InDoubt or Commits.
            </summary>
        </member>
        <member name="M:Castle.Facilities.AutoTx.Lifestyles.PerTransactionLifestyleManagerBase.GetSemanticTransactionForLifetime">
            <summary>
            	Gets the 'current' transaction; a semantic defined by the inheritors of this class.
            </summary>
            <returns>Maybe a current transaction as can be found in the transaction manager.</returns>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Lifestyles.PerTransactionLifestyleManager">
            <summary>
              A lifestyle manager that resolves a fresh instance for every transaction. In my opinion, this is the most semantically correct option of the two per-transaction lifestyle managers: it's possible to audit your code to verify that sub-sequent calls to services don't start new transactions on their own. With this lifestyle, code executing in other threads work as expected, as no instances are shared accross these threads (this refers to the Fork=true option on the TransactionAttribute).
            </summary>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Testing.ResolveEx">
            <summary>
            	Helper class for adding 'nifty' extensions to Windsor which ensures disposal/release of
            	resources.
            </summary>
        </member>
        <member name="M:Castle.Facilities.AutoTx.Testing.ResolveEx.ResolveScope``1(Castle.Windsor.IWindsorContainer)">
            <summary>
            	Resolve the service denoted by T.
            </summary>
            <typeparam name = "T">The service to resolve.</typeparam>
            <param name = "container">The container to resolve from.</param>
            <returns>The IOResolveScope</returns>
        </member>
        <member name="T:Castle.Facilities.AutoTx.Testing.ResolveScope`1">
            <summary>
              A scope usable for deterministically releasing (from Windsor) resources resolved. Important when testing logic that is dependent on the resource being released.
            </summary>
            <typeparam name="T"> </typeparam>
        </member>
        <member name="M:Castle.Facilities.AutoTx.TransactionalClassMetaInfo.AsTransactional(System.Reflection.MethodInfo)">
            <summary>
            	Gets the maybe transaction options for the method info, target. If the target
            	has not been associated with a tranaction, the maybe is none.
            </summary>
            <param name="target">Method to find the options for.</param>
            <returns>A non-null maybe <see cref="T:Castle.Transactions.ITransactionOptions"/>.</returns>
        </member>
        <member name="T:Castle.Facilities.AutoTx.TransactionalComponentInspector">
            <summary>
            	Transaction component inspector that selects the methods
            	available to get intercepted with transactions.
            </summary>
        </member>
        <member name="F:Castle.Facilities.AutoTx.TransactionInterceptor.Finally">
            <summary>
            For ordering interleaving of threads during testing!
            </summary>
        </member>
        <member name="T:Castle.Facilities.AutoTx.TransactionManagerCurrentTransactionSelector">
            <summary>
            	v3.1: This selector will allow you to select the transient component if
            	there is a component which is the same service and that is per-transaction.
            </summary>
        </member>
    </members>
</doc>
