// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.0.0.19191
//    <NameSpace>Daliboris.OOXML.Word.Transform</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLasyLoading>False</EnableLasyLoading><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><IncludeSerializeMethod>False</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net20</CodeBaseTag><SerializeMethodName>/dm</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>/sf</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><AutomaticProperties>False</AutomaticProperties><DisableDebug>False</DisableDebug><CustomUsings></CustomUsings>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Daliboris.OOXML.Word.Transform {
	using System.Collections.Generic;
    
    
    /// <summary>
    /// Obsahuje prvky, které poisují způsob transformace dokumentu, který používá odstavcové a znakové styly (např. MS Word, OpenOffice.org Writer), do formátu XML.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class transformace {
        
        private koren korenField;
        
        private List<tag> tagyField;
        
        private List<citac> citaceField;
        
        private List<nahrada> nahradyField;
        
        private tabulky tabulkyField;
        
        private System.DateTime posledniZmenaField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public transformace() {
            this.tabulkyField = new tabulky();
            this.nahradyField = new List<nahrada>();
            this.citaceField = new List<citac>();
            this.tagyField = new List<tag>();
            this.korenField = new koren();
        }
        
        public koren koren {
            get {
                return this.korenField;
            }
            set {
                this.korenField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("tag", IsNullable=false)]
        public List<tag> tagy {
            get {
                return this.tagyField;
            }
            set {
                this.tagyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("citac", IsNullable=false)]
        public List<citac> citace {
            get {
                return this.citaceField;
            }
            set {
                this.citaceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("nahrada", IsNullable=false)]
        public List<nahrada> nahrady {
            get {
                return this.nahradyField;
            }
            set {
                this.nahradyField = value;
            }
        }
        
        public tabulky tabulky {
            get {
                return this.tabulkyField;
            }
            set {
                this.tabulkyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime posledniZmena {
            get {
                return this.posledniZmenaField;
            }
            set {
                this.posledniZmenaField = value;
            }
        }
    }
    
    /// <summary>
    /// Název kořenového elementu ve výsledném dokumentu Xml.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class koren {
        
        private List<atribut> atributField;
        
        private string namespaceField;
        
        private string nazevField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public koren() {
            this.atributField = new List<atribut>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("atribut")]
        public List<atribut> atribut {
            get {
                return this.atributField;
            }
            set {
                this.atributField = value;
            }
        }
        
        /// <summary>
        /// Jmenný prostor, který bude kořenový element používat.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <summary>
        /// Název elementu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NCName")]
        public string nazev {
            get {
                return this.nazevField;
            }
            set {
                this.nazevField = value;
            }
        }
    }
    
    /// <summary>
    /// Atribut tvořený názvem a hodnotou, který se vygeneruje do výsledného dokumentu Xml.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class atribut {
        
        private string hodnotaField;
        
        private string nazevField;
        
        /// <summary>
        /// Hodnota atirubutu. Může jít o pevně stanovený textový řetězec nebo o jednu z proměnných: ^\o = vloží textový obsah stylu; ^nazevCitace = vloží aktuální hodnotu čítače se zadaným identifikátorem
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string hodnota {
            get {
                return this.hodnotaField;
            }
            set {
                this.hodnotaField = value;
            }
        }
        
        /// <summary>
        /// Název atributu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NCName")]
        public string nazev {
            get {
                return this.nazevField;
            }
            set {
                this.nazevField = value;
            }
        }
    }
    
    /// <summary>
    /// Definice pravidel pro generování značky/tagu ve výsledném dokumentu Xml.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class tag {
        
        private List<atribut> atributField;
        
        private List<nahrada> nahradaField;
        
        private bool bezZnackyField;
        
        private bool bezZnackyFieldSpecified;
        
        private bool ignorovatField;
        
        private bool ignorovatFieldSpecified;
        
        private string namespaceField;
        
        private string nazevField;
        
        private bool prazdnyElementField;
        
        private bool prazdnyElementFieldSpecified;
        
        private string predchoziStylField;
        
        private bool sloucitSPredchozimField;
        
        private bool sloucitSPredchozimFieldSpecified;
        
        private string nasledujiciStylField;
        
        private bool sloucitSNasledujicimField;
        
        private bool sloucitSNasledujicimFieldSpecified;
        
        private string stylField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public tag() {
            this.nahradaField = new List<nahrada>();
            this.atributField = new List<atribut>();
        }
        
        /// <summary>
        /// Atributy, které se vygenerují spolu s tagem.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("atribut")]
        public List<atribut> atribut {
            get {
                return this.atributField;
            }
            set {
                this.atributField = value;
            }
        }
        
        /// <summary>
        /// Pravidlo, které určuje nahrazování jednoho textu jiným. Pravidlo se aplikuje na text ve zdrojovém dokumentu a do výsledného souboru Xml se vloží nahrazený text.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("nahrada")]
        public List<nahrada> nahrada {
            get {
                return this.nahradaField;
            }
            set {
                this.nahradaField = value;
            }
        }
        
        /// <summary>
        /// Zda se pro daný styl má vygenerovat značka (true), nebo ne (false).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool bezZnacky {
            get {
                return this.bezZnackyField;
            }
            set {
                this.bezZnackyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bezZnackySpecified {
            get {
                return this.bezZnackyFieldSpecified;
            }
            set {
                this.bezZnackyFieldSpecified = value;
            }
        }
        
        /// <summary>
        /// Zda se má při zpracování obsah daného stylu ignorovat (nedostane se do výsledného dokumentu Xml).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ignorovat {
            get {
                return this.ignorovatField;
            }
            set {
                this.ignorovatField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ignorovatSpecified {
            get {
                return this.ignorovatFieldSpecified;
            }
            set {
                this.ignorovatFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @namespace {
            get {
                return this.namespaceField;
            }
            set {
                this.namespaceField = value;
            }
        }
        
        /// <summary>
        /// Název značky/tagu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NCName")]
        public string nazev {
            get {
                return this.nazevField;
            }
            set {
                this.nazevField = value;
            }
        }
        
        /// <summary>
        /// Zda se jedná o prázdný element (true), nebo o element, který může mít podřízené značky.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool prazdnyElement {
            get {
                return this.prazdnyElementField;
            }
            set {
                this.prazdnyElementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool prazdnyElementSpecified {
            get {
                return this.prazdnyElementFieldSpecified;
            }
            set {
                this.prazdnyElementFieldSpecified = value;
            }
        }
        
        /// <summary>
        /// Název předchozího stylu. Pokud je zadán, značka se bude genrovat pouze v případě, že bezprostředně předchozí styl má zadaný název. Lze použít název odstavcového i znakového stylu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string predchoziStyl {
            get {
                return this.predchoziStylField;
            }
            set {
                this.predchoziStylField = value;
            }
        }
        
        /// <summary>
        /// Pokud je (tture), sloučí textový obsah daného stylu s předchozím textem. Použije se značka (aktuálního nebo předchozího???) stylu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool sloucitSPredchozim {
            get {
                return this.sloucitSPredchozimField;
            }
            set {
                this.sloucitSPredchozimField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sloucitSPredchozimSpecified {
            get {
                return this.sloucitSPredchozimFieldSpecified;
            }
            set {
                this.sloucitSPredchozimFieldSpecified = value;
            }
        }
        
        /// <summary>
        /// Název následujícího stylu. Pokud je zadán, bude se k aktuálnímu a bezprostředně následujícímu stylu přistupovat jako k jednomu prvku.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nasledujiciStyl {
            get {
                return this.nasledujiciStylField;
            }
            set {
                this.nasledujiciStylField = value;
            }
        }
        
        /// <summary>
        /// Sloučí obsah aktuální stylu s obsahem stylu následujícího.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool sloucitSNasledujicim {
            get {
                return this.sloucitSNasledujicimField;
            }
            set {
                this.sloucitSNasledujicimField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sloucitSNasledujicimSpecified {
            get {
                return this.sloucitSNasledujicimFieldSpecified;
            }
            set {
                this.sloucitSNasledujicimFieldSpecified = value;
            }
        }
        
        /// <summary>
        /// Název zpracovávaného stylu. Může jít o odstavcový i znakový styl. Používají se názvy z uživatelského rozhraní, nikoli interní identifikátory stylů (známé např. z OOXML).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string styl {
            get {
                return this.stylField;
            }
            set {
                this.stylField = value;
            }
        }
    }
    
    /// <summary>
    /// Definice náhrady jednoho textu za jiný. (Nerozličuje se velikost písmen, nelze použít regulární výrazy???)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class nahrada {
        
        private string coField;
        
        private string cimField;
        
        /// <summary>
        /// Text, který se má vyhledat.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string co {
            get {
                return this.coField;
            }
            set {
                this.coField = value;
            }
        }
        
        /// <summary>
        /// Text, který nahradí hledaný text.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string cim {
            get {
                return this.cimField;
            }
            set {
                this.cimField = value;
            }
        }
    }
    
    /// <summary>
    /// Popis čítače a pravidel pro jeho generování.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class citac {
        
        private string formatField;
        
        private int hodnotaField;
        
        private int inkrementField;
        
        private string inkrementatorField;
        
        private string nazevField;
        
        private string postfixField;
        
        private string prefixField;
        
        private string resetatorField;
        
        private int vychoziHodnotaField;
        
        /// <summary>
        /// Formát, kteý se při vkládání do výsledného dokumentu Xml aplikuje na aktuální hodnotu čítače. Formát odpovídá pravidlům pro C# (neob Visual Basic???).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <summary>
        /// Výchzí hodnota čítače.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int hodnota {
            get {
                return this.hodnotaField;
            }
            set {
                this.hodnotaField = value;
            }
        }
        
        /// <summary>
        /// O kolik se zvedne hodnota čítače.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int inkrement {
            get {
                return this.inkrementField;
            }
            set {
                this.inkrementField = value;
            }
        }
        
        /// <summary>
        /// Podmínka, při níž se hodnota čítače zvýší o zadanou hodnotu (viz inkrement). Může obsahovat jméno stylu nebo název značky/tagu.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string inkrementator {
            get {
                return this.inkrementatorField;
            }
            set {
                this.inkrementatorField = value;
            }
        }
        
        /// <summary>
        /// Jendoznačný název čítače. Název se také používá při vkládání hodnoty čítače do výsledného dokumentu Xml (^nazevCitace).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="NCName")]
        public string nazev {
            get {
                return this.nazevField;
            }
            set {
                this.nazevField = value;
            }
        }
        
        /// <summary>
        /// Libovolný text, který se připojí za hodnotu čítače. (Lze nahradit formátem).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string postfix {
            get {
                return this.postfixField;
            }
            set {
                this.postfixField = value;
            }
        }
        
        /// <summary>
        /// Libovolná text, který se vloží před hodnotu čítače. (Lze nahradit formátem.)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string prefix {
            get {
                return this.prefixField;
            }
            set {
                this.prefixField = value;
            }
        }
        
        /// <summary>
        /// Prvek, který vrátí hodnotu čítače na výchozí hodnotu. Může jít o název stylu nebo i název značky.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string resetator {
            get {
                return this.resetatorField;
            }
            set {
                this.resetatorField = value;
            }
        }
        
        /// <summary>
        /// Výchozí hodnota čítače. Použije se rovněž při resetování hodnoty čítače. (Jak se liší od hodnoty???)
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int vychoziHodnota {
            get {
                return this.vychoziHodnotaField;
            }
            set {
                this.vychoziHodnotaField = value;
            }
        }
    }
    
    /// <summary>
    /// Definuje značky, které se použijí pro převod tabulek v dokumentu do formátu Xml.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class tabulky {
        
        private string tabulkaField;
        
        private string radekField;
        
        private string bunkaField;
        
        private string obsahPrazdneBunkyField;
        
        private string textMistoTabulkyField;
        
        private bool cislovatElementyField;
        
        private bool cislovatElementyFieldSpecified;
        
        /// <summary>
        /// Název značky/tagu, který se použije pro celou tabulku (např. table).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string tabulka {
            get {
                return this.tabulkaField;
            }
            set {
                this.tabulkaField = value;
            }
        }
        
        /// <summary>
        /// Název značky/tagu, který se použije pro jeden řádek tabulky (např. row).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string radek {
            get {
                return this.radekField;
            }
            set {
                this.radekField = value;
            }
        }
        
        /// <summary>
        /// Název značky/tagu, který se použije pro jednu buňku tabulky (např. cell).
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bunka {
            get {
                return this.bunkaField;
            }
            set {
                this.bunkaField = value;
            }
        }
        
        /// <summary>
        /// Text, který se ve výsledném dokumentu použije v případě, že buňka neobsahuje žádný text (nmapř. &nbsp;). Zůstane-li prázdné, vygeneruje se prázdný element.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string obsahPrazdneBunky {
            get {
                return this.obsahPrazdneBunkyField;
            }
            set {
                this.obsahPrazdneBunkyField = value;
            }
        }
        
        /// <summary>
        /// Text, který se vloží na místo
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string textMistoTabulky {
            get {
                return this.textMistoTabulkyField;
            }
            set {
                this.textMistoTabulkyField = value;
            }
        }
        
        /// <summary>
        /// Pokud je nastaveno na true, bude každý prvek označen pořadovým číslem v rámci nadřazeného prvku; číslování začíná od 1. V opačném případě (false) se pořadová čísla negenerují.
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool cislovatElementy {
            get {
                return this.cislovatElementyField;
            }
            set {
                this.cislovatElementyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cislovatElementySpecified {
            get {
                return this.cislovatElementyFieldSpecified;
            }
            set {
                this.cislovatElementyFieldSpecified = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class tagy {
        
        private List<tag> tagField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public tagy() {
            this.tagField = new List<tag>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tag")]
        public List<tag> tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
    }
    
    /// <summary>
    /// Skupina čítačů, které se použijí při generování dokumentu Xml např. pro jedinečné identifikátory.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class citace {
        
        private List<citac> citacField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public citace() {
            this.citacField = new List<citac>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("citac")]
        public List<citac> citac {
            get {
                return this.citacField;
            }
            set {
                this.citacField = value;
            }
        }
    }
    
    /// <summary>
    /// Seznam náhrad, které se použijí na původní text, přičemž do výsledného dokumentu Xml se vloží výsledek nahrazování.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.0.0.19191")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://schema.brus.cz/2010/WDoc2Xml.xsd", IsNullable=false)]
    public partial class nahrady {
        
        private List<nahrada> nahradaField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public nahrady() {
            this.nahradaField = new List<nahrada>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nahrada")]
        public List<nahrada> nahrada {
            get {
                return this.nahradaField;
            }
            set {
                this.nahradaField = value;
            }
        }
    }
}
